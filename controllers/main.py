# coding: utf-8
import logging, pprint, json
import hashlib, hmac

import requests

from odoo import http
from odoo.http import request, Response

_logger = logging.getLogger(__name__)


class PosIpayController(http.Controller):

    '''
    Verify the push notification origin
    '''
    def verify_hash(self, data, hsh_key):

        if not hsh_key:
            return False
        #verify hash key from ipay notification
        data_str = "{0}{1}{2}{3}{4}{5}{6}".format(data['amount'],
                                                    data['channel'],
                                                    data['msisdn'],
                                                    data['names'],
                                                    data['tstamp'],
                                                    data['txnid'],
                                                    data['vendorid'],)
        hashobj = hmac.new(hsh_key.encode(), data_str.encode(), hashlib.sha256)
        hsh = hashobj.hexdigest()

        if data['hash'] == hsh:
            return True
        else:
            return False

    '''
    Verify the transaction
    '''
    def verify_tx(self, vid, data, key):
        oid = data['txnid']
        url = "https://apis.ipayafrica.com/payments/v2/transaction/search"
        txt = "{0}{1}".format(oid, vid)
        hshobj = hmac.new(key.encode(), txt.encode(), hashlib.sha256)
        hsh = hshobj.hexdigest()
        data = {
            "vid": vid,
            "hash": hsh,
            "oid": oid
        }
        r = requests.post(url, data=data).json()
        if r["status"] == 0:
            return False
        elif r["status"] == 1:
            rd = r
            r = r["data"]
            txt = r["oid"]+r["vid"]+r["transaction_code"]+r["firstname"]+r["lastname"]+r["paid_at"]+r["payment_mode"]+r["sid"]
            hshobj = hmac.new(key.encode(), txt.encode(), hashlib.sha256)
            hsh = hshobj.hexdigest()
            if rd['hash'] == hsh:
                return True
            else:
                return False
        else:
            return False

    '''
    The registered endpoint whose url is given to ipay
    and autogenerated by the POS model
    '''
    @http.route('/pos_ipay/collector', type='json', auth='none', methods=['POST', 'GET'], csrf=False)
    def collector(self):
        data = json.loads(request.httprequest.data)
        conf_id = request.env['ipay.pos.config'].sudo().search([('ipay_merchant_id', '=', data['vendorid'])], limit=1)
        pos_mdl = request.env['pos.payment.method'].sudo().search([('ipay_pos_config_id', '=', conf_id.id)])
        mdl = request.env['ipay.pos.order'].sudo().search([
            ('name', '=', data['names']), 
            ('t_stamp', '=', data['tstamp']), 
            ('amount', '=', data['amount']) ])
        _logger.info('notification from ipay:\n%s', pprint.pformat(data))
        wrt_mdl = request.env['ipay.pos.order']#writtable model object
        hsh_correct = self.verify_hash(data, conf_id.ipay_merchant_key)
        if hsh_correct and not mdl:
            ver = True #self.verify_tx(conf_id.ipay_merchant_id, data, conf_id.ipay_merchant_key)
            if ver:
                iprp = {
                    "status": "1",
                    "id":data["txnid"],
                    "message":"Success"
                } #ipay repost, the notification ipay expects
                wrt_mdl.sudo().create([{
                    'name': data['names'],
                    'number': data['msisdn'],
                    'channel': data['channel'],
                    'amount': data['amount'],
                    't_stamp': data['tstamp'],
                }]) # set payment fields in the order tracker model
                pos_mdl.consumed = True
                pos_mdl.verified = True
                pos_mdl.ipay_tx_id = data["txnid"]
                pos_mdl.amount = data["amount"]
                headers = {"Content-Type": "application/json"}
                return json.loads(Response(json.dumps(iprp), headers=headers).data)
            else:
                #payment wasn't verified
                iprp = {
                "status": "0",
                "id": data["txnid"],
                "message":"Failed"
                } #ipay repost, the notification ipay expects
                pos_mdl.consumed = True
                pos_mdl.verified = False
                pos_mdl.ipay_tx_id = data["txnid"]
                pos_mdl.amount = data["amount"]
                headers = {"Content-Type": "application/json"}
                return json.loads(Response(json.dumps(iprp), headers=headers).data)
        if hsh_correct and mdl:
            #The request is a duplicate
            iprp = {
                "status": "2",
                "id":data["txnid"],
                "message":"Duplicate"
            } #ipay repost, the notification ipay expects
            pos_mdl.consumed = True
            pos_mdl.verified = True
            pos_mdl.ipay_tx_id = data["txnid"]
            pos_mdl.amount = data["amount"]
            headers = {"Content-Type": "application/json"}
            return json.loads(Response(json.dumps(iprp), headers=headers).data)
        if not hsh_correct:
            #the hash wasn't verified
            iprp = {
                "status": "0",
                "id": data["txnid"],
                "message":"Failed",
            } #ipay repost, the notification ipay expects
            pos_mdl.consumed = True
            pos_mdl.verified = False
            pos_mdl.ipay_tx_id = data["txnid"]
            pos_mdl.amount = data["amount"]
            headers = {"Content-Type": "application/json"}
            return json.loads(Response(json.dumps(iprp), headers=headers).data)